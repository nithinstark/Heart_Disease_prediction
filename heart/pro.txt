This file is csv file excute code


from django.shortcuts import render
from django.http import HttpResponse
from django.http import JsonResponse
import numpy as np
import pandas as pd





const form = document.querySelector("form");
const container = document.querySelector(".container");
const resultPositive = document.getElementById("result-positive");
const resultNegative = document.getElementById("result-negative");
const errorMsg = document.querySelector('.msg');
const spinner = document.querySelector('.loader-container');

resultPositive.style.display = "none";
resultNegative.style.display = "none";
errorMsg.style.display = 'none';
spinner.style.display = 'none';

form.addEventListener('submit', async (e) => {
    e.preventDefault();

    // Display spinner
    spinner.style.display = '';

    // Get CSRF token
    const csrfToken = getCookie('csrftoken');

    // Create FormData object and append CSRF token
    const formData = new FormData(form);
    formData.append('csrfmiddlewaretoken', csrfToken);

    try {
        const response = await fetch('/submit_data/', {
            method: 'POST',
            body: formData,
        });

        // Handle different response statuses
        if (response.status === 200) {
            const data = await response.json();
            container.style.display = 'none';
            if (data.prediction === 1) {
                resultPositive.style.display = '';
            } else if (data.prediction === 0) {
                resultNegative.style.display = '';
            }
        } else {
            errorMsg.style.display = '';
            setTimeout(() => {
                errorMsg.style.display = 'none';
            }, 5000);
        }
    } catch (error) {
        console.error('Error:', error);
        errorMsg.style.display = '';
        setTimeout(() => {
            errorMsg.style.display = 'none';
        }, 5000);
    } finally {
        // Hide spinner
        spinner.style.display = 'none';
    }
});

// Function to get CSRF token from cookie
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            // Extract CSRF token
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}





# Define the make_prediction function outside of submit_data
def make_prediction(df, age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal):
    # Add your prediction logic here
    prediction = 1  # For demonstration purposes, replace this with your actual prediction logic
    return prediction

def submit_data(request):
    if request.method == 'POST':
        name = request.POST.get('name')
        age = int(request.POST.get('age'))
        sex = int(request.POST.get('sex'))
        cp = int(request.POST.get('cp'))
        trestbps = int(request.POST.get('trestbps'))
        chol = int(request.POST.get('chol'))
        fbs = int(request.POST.get('fbs'))
        restecg = int(request.POST.get('restecg'))
        thalach = int(request.POST.get('thalach'))
        exang = int(request.POST.get('exang'))
        oldpeak = float(request.POST.get('oldpeak'))
        slope = int(request.POST.get('slope'))
        ca = int(request.POST.get('ca'))
        thal = int(request.POST.get('thal'))
        
        df = pd.read_csv('myproject/heart_data.csv')
        
        prediction = make_prediction(df, age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal)
        if prediction is not None:
            return JsonResponse({'prediction': prediction})
        else:
            return JsonResponse({'error': 'Invalid request method'})



{% load static %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="{% static 'main.css' %}">
    <title>Heart Predictor </title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" integrity="sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN" crossorigin="anonymous">
</head>
<body>
    <div class="loader-container">

        <div class="loader"></div>
    </div>
    <h1 id="a"></h1>
    <div class="result" id="result-positive">
        <h1>This person has Heart Disease</h1>
        <i class="fa fa-frown-o"></i>
        <a href=""><button>Try for another person</button></a>
    </div>

    <div class="result" id="result-negative">
        <h1>This Person don't have heart disease</h1>
        <i class="fa fa-smile-o"></i>
        <a href=""><button>Try for another person</button></a>
    </div>

    <div class="msg">
        <p>Please check the data you entered</p>
    </div>
    <div class="container">
        <form method="post" action="{% url 'myapp:submit_data' %}">
            <p>Name</p>
            <input type="text" name="name" id="name" required> <br><br>

            <p>Age</p>
            <input type="number" name="age" id="age" required> <br><br> 
    
            <p>Gender</p>
            <input type="radio" value="1" name="sex" id="male"> 
            <label for="male">Male</label>
            <input type="radio" value="0" name="sex" id="female">
            <label for="female">Female</label>
            <br><br> 
    
            <p>Chest Pain Type</p>
            <input type="radio" id="typical-angina" name="cp" value="0">
            <label for="typical-angina">Typical Angina</label>
            <input type="radio" id="atypical-angina" name="cp" value="1">
            <label for="atypical-angina">Atypical Angina</label>
            <input type="radio" id="non-anginal-pain" name="cp" value="2">
            <label for="non-anginal-pain">Non Anginal Pain</label>
            <input type="radio" id="asymptomatic" name="cp" value="3">
            <label for="asymptomatic">asymptomatic</label>
            <br><br>
    
            <p>Resting blood pressure</p>
            <input type="text"  name="trestbps" id="trestbps" required> <br><br> 
    
            <p>serum cholestoral in mg/dl</p>
            <input type="text" name="chol" id="chol" required> <br><br> 
            
    
            <p>fasting blood sugar > 120 mg/dl</p>
            <input type="radio" value="1" name="fbs" id="true">
            <label for="true"> True</label>
            <input type="radio" value="0" name="fbs" id="false">
            <label for="false">False</label> <br><br>
    
    
            <p>resting electrocardiographic results</p>
            <input type="radio" value="0" name="restecg" id="normal" > 
            <label for="normal">Normal</label>
            <input type="radio" value="1" name="restecg" id="st">
            <label for="st">having ST-T wave abnormality</label>
            <input type="radio" value="2" name="restecg" id="sh">
            <label for="sh">showing probable or definite left ventricular hypertrophy</label> <br><br>
    
            <p>maximum heart rate achieved</p>
            <input type="number" name="thalach" id="thalach" required> <br><br> 
    
    
            <p> exercise induced angina </p>
            <input type="radio" value="1" name="exang" id="yes"> 
            <label for="yes">Yes</label>
            <input type="radio" value="0" name="exang" id="no"> 
            <label for="no">No</label> <br><br>
    
            <p>ST depression induced by exercise relative to rest</p>
            <input type="text" name="oldpeak" id="oldpeak" required> <br><br>
    
    
            <p>the slope of the peak exercise ST segment</p>
            <input type="radio" value="0" name="slope" id="upsloping"> 
            <label for="upsloping">upsloping</label>
            <input type="radio" value="1" name="slope" id="flat"> 
            <label for="flat">Flat</label>
            <input type="radio" value="2" name="slope" id="downsloping"> 
            <label for="downsloping">downsloping</label> <br><br>
    
    
    
            <p> number of major vessels (0-3)</p>
            <input type="number" name="ca" id="ca" required> <br><br> 
    
    
    
            <p>Thal</p>
            <input type="radio" value="1" name="thal" id="normal-thal"> 
            <label for="normal-thal">Normal</label>
            <input type="radio" value="2" name="thal" id="fixed-defect"> 
            <label for="fixed-defect">fixed defect</label>
            <input type="radio" value="3" name="thal" id="reversable-defect"> 
            <label for="reversable-defect">reversable defect</label>
    
            <br><br>
    
            <input id="submit_data" type="submit" value="Submit data">
        </form>
    </div>

    <script src="{% static 'js/script.js' %}"></script>
</body>
</html>